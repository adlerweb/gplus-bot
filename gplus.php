<?PHP

/**
 * Google+ (plus.google.com) PHP Curl bot
 * @since Sep 29 2011
 * @version 05.08.2012
 * @link http://360percents.com/
 * @author Luka Pušić <luka@pusic.si>
 * @author Florian Knodt <adlerweb@adlerweb.info>
 */

/**
 * Google+ (plus.google.com) PHP Curl bot library
 * @package gplus-bot
 */
class gplusBot{
    /**
     * File to store cookies during transaction
     * @var string
     */
    private $cookies;
    
    /**
     * Number of seconds to wait between requests
     * @var int
     */
    private $sleep;
    
    /**
     * User Agent sent to google
     * @var string
     */
    private $uagent;
    
    /**
     * Debug-Mode
     * 
     * false = off, 1 = basic, 2 = full debug
     * @var bool|int
     */
    private $debug;
    
    /**
     * Constructor - connect to G+ and log in
     *
     * @param string E-Mail adress
     * @param string Password
     * @param string Filename for temporary cookie storage
     * @param bool|int Number of seconds to wait between requests, false = random
     * @param bool|string User agent sent to google
     * @param bool|int Debug-Mode: false = off, 1 = basic, 2 = full debug
     */
    function __construct($user, $pass, $cookies='cookie.txt', $sleep=false, $uagent=false, $debug=2) {
        //Defaults
        $this->sleep    = ($sleep === false)    ? rand(3,15) : $sleep;
        $this->uagent   = ($uagent === false)   ? 'Mozilla/4.0 (compatible; MSIE 5.0; S60/3.0 NokiaN73-1/2.0(2.0617.0.0.7) Profile/MIDP-2.0 Configuration/CLDC-1.1)' : $uagent;
        $this->cookies  = $cookies;
        $this->debug    = $debug;
        
        //Clean cookies
        if(file_exists($this->cookies)) unlink($this->cookies);
        touch($this->cookies);
        
        //Login
        $data=($this->login_data($user, $pass));
        $this->login($data);
    }
    
    /**
     * Destructor - logout and clean up
     */
    function __destruct() {
        $this->logout();
        if(file_exists($this->cookies)) unlink($this->cookies);
    }
    
    /**
     * Login_data - Collect login informatioin
     * @param string E-Mail
     * @param string Password
     * @return array Data needed to log in
     */
    function login_data($user, $pass) {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_COOKIEJAR, $this->cookies);
        curl_setopt($ch, CURLOPT_COOKIEFILE, $this->cookies);
        curl_setopt($ch, CURLOPT_USERAGENT, $this->uagent);
        curl_setopt($ch, CURLOPT_URL, 'https://plus.google.com/app/basic/login');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
        
        $this->debug('URL: https://plus.google.com/app/basic/login', 2);
        
        $buf = utf8_decode(html_entity_decode(curl_exec($ch)));
        sleep($this->sleep);
        $buf = str_replace( '&amp;', '&', $buf ); // just in case any correctly encoded
        $buf = str_replace( '&', '&amp;', $buf ); // now encode them all again
        curl_close($ch);
    
        $this->debug('[+] Sending GET request to: https://plus.google.com/app/basic/login', 1);
        $this->debug($buf, 2);
    
        $toreturn = array();
    
        $doc = new DOMDocument;
        $doc->loadhtml($buf);
        $inputs = $doc->getElementsByTagName('input');
        foreach ($inputs as $input) {
            $toreturn[$input->getAttribute('name')] = $input->getAttribute('value');
        }
        $toreturn['Email']  = $user;
        $toreturn['Passwd'] = $pass;
        
        sleep($this->sleep);
        return array($toreturn, $doc->getElementsByTagName('form')->item(0)->getAttribute('action'));
    }
    
    /**
     * Send login information to google
     * @param array Login information generated by login_data()
     * @see login_data
     */
    function login($postdata) {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_COOKIEJAR, $this->cookies);
        curl_setopt($ch, CURLOPT_COOKIEFILE, $this->cookies);
        curl_setopt($ch, CURLOPT_USERAGENT, $this->uagent);
        curl_setopt($ch, CURLOPT_URL, $postdata[1]);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $postdata[0]);
        $this->debug('URL: '.$postdata[1], 2);
        $this->debug('DATA: '.print_r($postdata[0], true), 2);
        $buf = curl_exec($ch); #this is not the g+ home page, because the b**** doesn't redirect properly
        sleep($this->sleep);
        curl_close($ch);
        $this->debug($buf, 2);
    
        $this->debug('[+] Sending POST request to: '.$postdata[1], 1);
    }
    
    /**
     * Post something to our profile
     * @param string Message to post
     */
    function update_profile_status($status) {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_COOKIEJAR, $this->cookies);
        curl_setopt($ch, CURLOPT_COOKIEFILE, $this->cookies);
        curl_setopt($ch, CURLOPT_USERAGENT, $this->uagent);
        curl_setopt($ch, CURLOPT_URL, 'https://m.google.com/app/plus/?v=compose&group=m1c&hideloc=1');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
        $this->debug('URL: '.'https://m.google.com/app/plus/?v=compose&group=m1c&hideloc=1', 2);
        $buf = utf8_decode(html_entity_decode(str_replace('&', '', curl_exec($ch))));
        sleep($this->sleep);
        $header = curl_getinfo($ch);
        curl_close($ch);
        $this->debug($buf, 2);
    
        $params = array();
        $doc = new DOMDocument;
        $doc->loadhtml($buf);
        $this->debug($buf, 2);
        $inputs = $doc->getElementsByTagName('input');
        foreach ($inputs as $input) {
            if (!in_array($input->getAttribute('name'), array('editcircles', 'editattachedphotos', 'showattachedphoto'))) {
                $params[$input->getAttribute('name')] = $input->getAttribute('value');
            }
        }
        $params['newcontent'] = $status;
        $baseurl = 'https://m.google.com' . parse_url($header['url'], PHP_URL_PATH);
    
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_COOKIEJAR, $this->cookies);
        curl_setopt($ch, CURLOPT_COOKIEFILE, $this->cookies);
        curl_setopt($ch, CURLOPT_USERAGENT, $this->uagent);
        //delete group=b0& in the line below, to post just to your circles, not to public
        curl_setopt($ch, CURLOPT_URL, $baseurl . '?v=compose&group=m1c&group=b0&hideloc=1&a=post');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($ch, CURLOPT_REFERER, $baseurl . '?v=compose&group=m1c&group=b0&hideloc=1');
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
        $this->debug('URL: '.$baseurl . '?v=compose&group=m1c&group=b0&hideloc=1&a=post', 2);
        $this->debug('DATA: '.print_r($params, true), 2);
        $buf = curl_exec($ch);
        sleep($this->sleep);
        $header = curl_getinfo($ch);
        curl_close($ch);
        $this->debug($buf, 2);
    
        $this->debug('[+] POST Updating status on: '.$baseurl, 1);
    }

    /**
     * Post message with an attached image
     *
     * @param string Message to post
     * @param sting Path to a image-file stored on the server
     */
    function update_profile_status_image($status, $imgfile) {
        //Get main form
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_COOKIEJAR, $this->cookies);
        curl_setopt($ch, CURLOPT_COOKIEFILE, $this->cookies);
        curl_setopt($ch, CURLOPT_USERAGENT, $this->uagent);
        curl_setopt($ch, CURLOPT_URL, 'https://m.google.com/app/plus/?v=compose&group=m1c&hideloc=1');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
        $this->debug('URL: '.'https://m.google.com/app/plus/?v=compose&group=m1c&hideloc=1', 2);
        $buf = utf8_decode(curl_exec($ch));
        sleep($this->sleep);
        $header = curl_getinfo($ch);
        curl_close($ch);
        
        //Get image-form
        $params = array();
        $doc = new DOMDocument;
        $doc->loadhtml($buf);
        $this->debug($buf, 2);
        $inputs = $doc->getElementsByTagName('input');
        foreach ($inputs as $input) {
            if (!in_array($input->getAttribute('name'), array('editcircles', 'post'))) {
                $params[$input->getAttribute('name')] = $input->getAttribute('value');
            }
        }
        $action = parse_url($header['url'], PHP_URL_PATH) . html_entity_decode($doc->getElementsByTagName('form')->item(0)->getAttribute('action'));;
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_COOKIEJAR, $this->cookies);
        curl_setopt($ch, CURLOPT_COOKIEFILE, $this->cookies);
        curl_setopt($ch, CURLOPT_USERAGENT, $this->uagent);
        //delete group=b0& in the line below, to post just to your circles, not to public
        curl_setopt($ch, CURLOPT_URL, 'https://m.google.com' . $action);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($ch, CURLOPT_REFERER, 'https://m.google.com/app/plus/?v=compose&group=m1c&hideloc=1');
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
        $this->debug('URL: '.'https://m.google.com' . $action, 2);
        $this->debug('DATA: '.print_r($params, true), 2);
        $buf = utf8_decode(curl_exec($ch));
        sleep($this->sleep);
        $header = curl_getinfo($ch);
        curl_close($ch);
        
        //Upload image
        $params = array();
        $doc = new DOMDocument;
        $doc->loadhtml($buf);
        $this->debug($buf, 2);
        $inputs = $doc->getElementsByTagName('input');
        foreach ($inputs as $input) {
            if (!in_array($input->getAttribute('name'), array('Photo'))) {
                $params[$input->getAttribute('name')] = $input->getAttribute('value');
            }
        }
        $params['Photo'] = '@'.$imgfile;
        $lastaction=$action;
        $action = html_entity_decode($doc->getElementsByTagName('form')->item(0)->getAttribute('action'));
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_COOKIEJAR, $this->cookies);
        curl_setopt($ch, CURLOPT_COOKIEFILE, $this->cookies);
        curl_setopt($ch, CURLOPT_USERAGENT, $this->uagent);
        //delete group=b0& in the line below, to post just to your circles, not to public
        curl_setopt($ch, CURLOPT_URL, 'https://m.google.com' . $action);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($ch, CURLOPT_REFERER, 'https://m.google.com' . $lastaction);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
        $this->debug('URL: '.'https://m.google.com' . $action, 2);
        $this->debug('DATA: '.print_r($params, true), 2);
        $buf = utf8_decode(curl_exec($ch));
        sleep($this->sleep);
        $header = curl_getinfo($ch);
        curl_close($ch);
        
        //Post status
        $params = array();
        $doc = new DOMDocument;
        $doc->loadhtml($buf);
        $this->debug($buf, 2);
        $inputs = $doc->getElementsByTagName('input');
        foreach ($inputs as $input) {
            if (!in_array($input->getAttribute('name'), array('editcircles', 'editattachedphotos', 'showattachedphoto'))) {
                $params[$input->getAttribute('name')] = $input->getAttribute('value');
            }
        }
        $params['newcontent'] = $status;
        $lastaction=$action;
        $action = parse_url($header['url'], PHP_URL_PATH) . html_entity_decode($doc->getElementsByTagName('form')->item(0)->getAttribute('action'));;
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_COOKIEJAR, $this->cookies);
        curl_setopt($ch, CURLOPT_COOKIEFILE, $this->cookies);
        curl_setopt($ch, CURLOPT_USERAGENT, $this->uagent);
        //delete group=b0& in the line below, to post just to your circles, not to public
        curl_setopt($ch, CURLOPT_URL, 'https://m.google.com' . $action);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($ch, CURLOPT_REFERER, 'https://m.google.com' . $lastaction);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
        $this->debug('URL: '.'https://m.google.com' . $action, 2);
        $this->debug('DATA: '.print_r($params, true), 2);
        $buf = utf8_decode(curl_exec($ch));
        sleep($this->sleep);
        $header = curl_getinfo($ch);
        curl_close($ch);
        $this->debug($buf, 2);
        
        $this->debug('[+] POST Updating status with image', 1);
    }
    
    /**
     * Post something to a definded page - not implemented yet
     */
    function update_page_status() {
        return false; //Not implemented yet
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_COOKIEJAR, $this->cookies);
        curl_setopt($ch, CURLOPT_COOKIEFILE, $this->cookies);
        curl_setopt($ch, CURLOPT_USERAGENT, $this->uagent);
        curl_setopt($ch, CURLOPT_URL, 'https://plus.google.com/u/0/b/' . $GLOBALS['pageid'] . '/');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
        $buf = utf8_decode(html_entity_decode(str_replace('&', '', curl_exec($ch))));
        sleep($this->sleep);
        curl_close($ch);
        $this->debug($buf, 2);
    }
    
    /**
     * Terminate current session
     */
    function logout() {
        $this->debug('[+] GET Logging out', 1);
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_COOKIEJAR, $this->cookies);
        curl_setopt($ch, CURLOPT_COOKIEFILE, $this->cookies);
        curl_setopt($ch, CURLOPT_USERAGENT, $this->uagent);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_URL, 'https://www.google.com/m/logout');
        $buf = curl_exec($ch);
        sleep($this->sleep);
        curl_close($ch);
        $this->debug($buf, 2);
    }
    
    /**
     * Debug handler
     * @param string Debug-Message
     * @param int Minimal level for this message
     */
    function debug($message, $level) {
        if(!$this->debug) return;
        if($this->debug >= $level) echo $message."\n";
    }
}

?>

